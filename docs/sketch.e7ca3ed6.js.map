{"version":3,"sources":["utils.js","canvas.js","algorithms/quick-sort.js","algorithms/heap-sort.js","algorithms/merge-sort.js","algorithms/selection-sort.js","algorithms/insertion-sort.js","sketch.js"],"names":["debounce","f","delay","prevTimeout","args","clearTimeout","setTimeout","swap","arr","i","j","canvas","createCanvas","width","height","remove","document","createElement","style","body","appendChild","ctx","getContext","background","color","fillStyle","fillRect","fill","rect","x","y","w","h","quickSort","start","stop","length","pivot","partition","heapSort","buildMaxHeap","maxHeapify","Math","floor","heapSize","index","right","left","largest","mergeSort","split","merge","slice","k","selectionSort","min","insertionSort","key","select","querySelector","playBtn","pauseBtn","resetBtn","barWidthInput","timeStepInput","timeStepDisplay","algorithms","Object","keys","forEach","algorithm","option","value","textContent","array","gap","sorter","offsetLeft","sketch","simulationTime","barWidth","timeStep","playing","setPlayState","state","classList","toggle","addEventListener","Date","now","setup","ceil","parseFloat","toFixed","resize","window","innerWidth","innerHeight","numPoints","random","graphWidth","draw","dt","done","next","render","requestAnimationFrame"],"mappings":"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","file":"sketch.e7ca3ed6.js","sourceRoot":"../src","sourcesContent":["export const debounce = (f, delay) => {\n\tlet prevTimeout;\n\treturn (...args) => {\n\t\tclearTimeout(prevTimeout);\n\t\tprevTimeout = setTimeout(() => f(...args), delay);\n\t};\n};\n\nexport const swap = function* (arr, i, j) {\n\tyield 'read';\n\tyield 'read';\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n\tyield 'write';\n\tyield 'write';\n};\n","let canvas;\nexport default function createCanvas(width, height) {\n\tif (canvas) {\n\t\tcanvas.remove();\n\t}\n    canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    document.body.appendChild(canvas);\n    const ctx = canvas.getContext('2d');\n\treturn {\n        width, height,\n\t\tbackground: color => {\n            ctx.fillStyle = color;\n            ctx.fillRect(0, 0, width, height);\n        },\n        fill: color => {\n            ctx.fillStyle = color;\n        },\n        rect: (x, y, w, h) => {\n            ctx.fillRect(x, y, w, h);\n        },\n\t};\n}\n","import {swap} from '../utils.js';\n\n/**\n * @param {number[]} arr the array to sort\n * @param {number} [start=0] the start of the range to sort\n * @param {number} [stop=arr.length] the end of the range to sort (excluded)\n * @returns {Generator} A generator that will progressively sort the underlying\n *  array\n */\nexport default function* quickSort(arr, start = 0, stop = arr.length) {\n    if (stop > start + 1) {\n        yield 'read';\n        const pivot = arr[stop - 1];\n        let partition = start;\n        for (let j = start; j < stop; j++) {\n            yield 'read';\n            if (arr[j] <= pivot) {\n                yield* swap(arr, partition, j);\n                partition++;\n            }\n        }\n        yield* quickSort(arr, start, partition - 1);\n        yield* quickSort(arr, partition - 1, stop);\n    }\n}\n","import {swap} from '../utils.js';\n\n/**\n * @param {number[]} arr the array to sort\n * @returns {Generator} A generator that will progressively sort the underlying\n *  array\n */\nexport default function* heapSort(arr) {\n    yield* buildMaxHeap(arr);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        yield *swap(arr, i, 0);\n        yield* maxHeapify(arr, i, 0);\n    }\n}\n/**\n * @param {number[]} arr the array in which to build the heap\n * @returns {Generator} A generator that will progressively build a heap in the\n *  underlying array\n */\nfunction* buildMaxHeap(arr) {\n    for (let i = Math.floor(arr.length / 2); i >= 0; i--) {\n        yield* maxHeapify(arr, arr.length, i);\n    }\n}\n/**\n * @param {number[]} arr the array to maxHeapify\n * @param {number} heapSize the index of the end of the heap in the array\n * @param {number} index the position from which to maxHeapify\n * @returns {Generator} A generator that will progressively \"max-heapify\" the\n *  underlying array\n */\nfunction* maxHeapify(arr, heapSize, index) {\n    const right = 2 * (index + 1);\n    const left = right - 1;\n    let largest = index;\n    yield 'read';\n    yield 'read';\n    if (left < heapSize && arr[left] > arr[largest]) {\n        largest = left;\n    }\n    yield 'read';\n    yield 'read';\n    if (right < heapSize && arr[right] > arr[largest]) {\n        largest = right;\n    }\n    if (largest !== index) {\n        yield* swap(arr, index, largest);\n        yield* maxHeapify(arr, heapSize, largest);\n    }\n}\n","/**\n * @param {number[]} arr the array to sort\n * @param {number} [start=0] the start of the range to sort\n * @param {number} [stop=arr.length] the end of the range to sort (excluded)\n * @returns {Generator} A generator that will progressively sort the underlying\n *  array\n */\nexport default function* mergeSort(arr, start = 0, stop = arr.length) {\n    if (stop > start + 1) {\n        const split = Math.floor((start + stop) / 2);\n        yield* mergeSort(arr, start, split);\n        yield* mergeSort(arr, split, stop);\n        yield* merge(arr, start, split, stop);\n    }\n}\n/**\n * @param {number[]} arr the array containing the sorted ranges to merge\n * @param {number} start the start of the first range to merge\n * @param {number} split the end of the first range and start of the second\n * @param {number} stop the end of the second range to merge\n * @returns {Generator} A generator that will progressively merge the ranges\n *  into the underlying array\n */\nfunction* merge(arr, start, split, stop) {\n    for (let i = start; i < stop; i++) {\n        yield 'read'; // All reads needed by both slices\n    }\n    const left = arr.slice(start, split);\n    const right = arr.slice(split, stop);\n    let i = 0, j = 0;\n    for (let k = start; k < stop; k++) {\n        yield 'read';\n        yield 'read';\n        if (j >= right.length || left[i] < right[j]) {\n            yield 'read';\n            arr[k] = left[i];\n            yield 'write';\n            i++;\n        } else {\n            yield 'read';\n            arr[k] = right[j];\n            yield 'write';\n            j++;\n        }\n    }\n}\n","import {swap} from '../utils.js';\n\n/**\n * @param {number[]} arr the array to sort\n * @returns {Generator} A generator that will progressively sort the underlying\n *  array\n */\nexport default function* selectionSort(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        let min = i;\n        for (let j = i; j < arr.length; j++) {\n            yield 'read';\n            min = arr[j] < arr[min] ? j : min;\n        }\n        yield* swap(arr, i, min);\n    }\n}\n","/**\n * @param {number[]} arr the array to sort\n * @returns {Generator} A generator that will progressively sort the underlying\n *  array\n */\nexport default function* insertionSort(arr) {\n    for (let i = 1; i < arr.length; i++) {\n        yield 'read';\n        yield 'read';\n        const key = arr[i];\n        let j = i - 1;\n        yield 'read'; // read in loop condition\n        while (j >= 0 && arr[j] > key) {\n            yield 'read';\n            arr[j + 1] = arr[j];\n            yield 'write';\n            j--;\n            yield 'read'; // read in loop condition\n        }\n        arr[j + 1] = key;\n        yield 'write';\n    }\n}\n","import {debounce} from './utils.js';\nimport createCanvas from './canvas.js';\nimport quickSort from './algorithms/quick-sort.js';\nimport heapSort from './algorithms/heap-sort.js';\nimport mergeSort from './algorithms/merge-sort.js';\nimport selectionSort from './algorithms/selection-sort.js';\nimport insertionSort from './algorithms/insertion-sort.js';\n\nconst select = document.querySelector('select[name=\"algorithm\"]');\nconst playBtn = document.querySelector('#play');\nconst pauseBtn = document.querySelector('#pause');\nconst resetBtn = document.querySelector('#reset');\nconst barWidthInput = document.querySelector('input[name=\"bar-width\"]');\nconst timeStepInput = document.querySelector('label[name=\"time-step\"] > input');\nconst timeStepDisplay = document.querySelector('label[name=\"time-step\"] > span');\nconst algorithms = {\n\t\"heap sort\": heapSort,\n\t\"merge sort\": mergeSort,\n\t\"quick sort\": quickSort,\n\t\"selection sort (slow)\": selectionSort,\n\t\"insertion sort (slow)\": insertionSort,\n};\nObject.keys(algorithms).forEach(algorithm => {\n\tconst option = document.createElement('option');\n\toption.value = option.textContent = algorithm;\n\tselect.appendChild(option);\n});\nconst array = [];\nconst gap = 0;\nlet barWidth = 1;\nlet timeStep = .5;\nlet playing = false;\nlet sorter;\nlet offsetLeft;\nlet sketch;\nlet simulationTime;\n\nfunction setPlayState(state) {\n\tplaying = state;\n\tplayBtn.classList.toggle('d-none', state);\n\tpauseBtn.classList.toggle('d-none', !state);\n}\nplayBtn.addEventListener('click', () => {\n\tsimulationTime = Date.now();\n\tsetPlayState(true);\n});\npauseBtn.addEventListener('click', () => {\n\tsetPlayState(false);\n});\nresetBtn.addEventListener('click', () => {\n\tsetPlayState(false);\n\tsetup();\n});\nselect.addEventListener('change', () => {\n\tsorter = algorithms[select.value](array);\n});\nbarWidthInput.addEventListener('input', () => {\n\tbarWidth = Math.ceil(2 ** parseFloat(barWidthInput.value));\n\tsetup();\n});\ntimeStepInput.addEventListener('input', () => {\n\ttimeStep = 2 ** parseFloat(timeStepInput.value);\n\ttimeStepDisplay.textContent = `(${timeStep.toFixed(3)}ms)`;\n});\nconst resize = debounce(() => setup(), 200);\nwindow.addEventListener('resize', () => {\n\tresize();\n});\n\nfunction setup() {\n\tsketch = createCanvas(window.innerWidth, window.innerHeight);\n\tsketch.background('white');\n\tconst numPoints = Math.floor((sketch.width + gap) / (barWidth + gap));\n\tarray.length = 0;\n\tfor (let i = 0; i < numPoints; i++) {\n\t\tarray[i] = Math.random();\n\t}\n\tconst graphWidth = numPoints * barWidth + (numPoints - 1) * gap;\n\toffsetLeft = Math.floor((sketch.width - graphWidth) / 2);\n\tsorter = algorithms[select.value](array);\n}\n\nfunction draw(dt) {\n\tsketch.background('white');\n\tsketch.fill('black');\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsketch.rect(offsetLeft + i * (barWidth + gap), sketch.height, barWidth, -array[i] * (sketch.height - 1));\n\t}\n\tif (playing) {\n\t\tsimulationTime += timeStep * Math.floor(dt / timeStep);\n\t\tfor (let i = 0; i < Math.floor(dt / timeStep); i++) {\n\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\tconst {value, done} = sorter.next();\n\t\t\tif (done) {\n\t\t\t\tsetPlayState(false);\n\t\t\t\tsorter = algorithms[select.value](array);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction render() {\n\tdraw(Date.now() - simulationTime);\n\trequestAnimationFrame(render);\n}\n\nsetup();\nrender();\n"]}