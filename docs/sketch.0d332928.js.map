{"version":3,"sources":["utils.js","algorithms/quick-sort.js","algorithms/heap-sort.js","algorithms/merge-sort.js","algorithms/selection-sort.js","algorithms/insertion-sort.js","sketch.js"],"names":["debounce","f","delay","prevTimeout","args","clearTimeout","setTimeout","swap","arr","i","j","quickSort","start","stop","length","pivot","partition","heapSort","buildMaxHeap","maxHeapify","Math","floor","heapSize","index","right","left","largest","mergeSort","split","merge","slice","k","selectionSort","min","insertionSort","key","p5","sketch","select","document","querySelector","playBtn","pauseBtn","resetBtn","algorithms","Object","keys","forEach","algorithm","option","createElement","value","textContent","appendChild","array","playing","sorter","offsetLeft","setPlayState","state","classList","toggle","addEventListener","setup","resize","window","createCanvas","windowWidth","windowHeight","background","numPoints","width","barWidth","random","graphWidth","draw","fill","noStroke","rect","height","ceil","next","done"],"mappings":"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","file":"sketch.0d332928.js","sourceRoot":"../src","sourcesContent":["export const debounce = (f, delay) => {\n\tlet prevTimeout;\n\treturn (...args) => {\n\t\tclearTimeout(prevTimeout);\n\t\tprevTimeout = setTimeout(() => f(...args), delay);\n\t};\n};\n\nexport const swap = (arr, i, j) => {\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n};\n","import {swap} from '../utils.js';\n\n/**\n * @param {number[]} arr the array to sort\n * @param {number} [start=0] the start of the range to sort\n * @param {number} [stop=arr.length] the end of the range to sort (excluded)\n * @returns {Generator} A generator that will progressively sort the underlying\n *  array\n */\nexport default function* quickSort(arr, start = 0, stop = arr.length) {\n    if (stop > start + 1) {\n        const pivot = arr[stop - 1];\n        let partition = start;\n        for (let j = start; j < stop; j++) {\n            if (arr[j] <= pivot) {\n                swap(arr, partition, j);\n                yield;\n                partition++;\n            }\n        }\n        yield* quickSort(arr, start, partition - 1);\n        yield* quickSort(arr, partition - 1, stop);\n    }\n}\n","import {swap} from '../utils.js';\n\n/**\n * @param {number[]} arr the array to sort\n * @returns {Generator} A generator that will progressively sort the underlying\n *  array\n */\nexport default function* heapSort(arr) {\n    yield* buildMaxHeap(arr);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        swap(arr, i, 0);\n        yield* maxHeapify(arr, i, 0);\n    }\n}\n/**\n * @param {number[]} arr the array in which to build the heap\n * @returns {Generator} A generator that will progressively build a heap in the\n *  underlying array\n */\nfunction* buildMaxHeap(arr) {\n    for (let i = Math.floor(arr.length / 2); i >= 0; i--) {\n        yield* maxHeapify(arr, arr.length, i);\n    }\n}\n/**\n * @param {number[]} arr the array to maxHeapify\n * @param {number} heapSize the index of the end of the heap in the array\n * @param {number} index the position from which to maxHeapify\n * @returns {Generator} A generator that will progressively \"max-heapify\" the\n *  underlying array\n */\nfunction* maxHeapify(arr, heapSize, index) {\n    const right = 2 * (index + 1);\n    const left = right - 1;\n    let largest = index;\n    if (left < heapSize && arr[left] > arr[largest]) {\n        largest = left;\n    }\n    if (right < heapSize && arr[right] > arr[largest]) {\n        largest = right;\n    }\n    if (largest !== index) {\n        swap(arr, index, largest);\n        yield;\n        yield* maxHeapify(arr, heapSize, largest);\n    }\n}\n","/**\n * @param {number[]} arr the array to sort\n * @param {number} [start=0] the start of the range to sort\n * @param {number} [stop=arr.length] the end of the range to sort (excluded)\n * @returns {Generator} A generator that will progressively sort the underlying\n *  array\n */\nexport default function* mergeSort(arr, start = 0, stop = arr.length) {\n    if (stop > start + 1) {\n        const split = Math.floor((start + stop) / 2);\n        yield* mergeSort(arr, start, split);\n        yield* mergeSort(arr, split, stop);\n        yield* merge(arr, start, split, stop);\n    }\n    yield;\n}\n/**\n * @param {number[]} arr the array containing the sorted ranges to merge\n * @param {number} start the start of the first range to merge\n * @param {number} split the end of the first range and start of the second\n * @param {number} stop the end of the second range to merge\n * @returns {Generator} A generator that will progressively merge the ranges\n *  into the underlying array\n */\nfunction* merge(arr, start, split, stop) {\n    const left = arr.slice(start, split);\n    const right = arr.slice(split, stop);\n    let i = 0, j = 0;\n    for (let k = start; k < stop; k++) {\n        if (j >= right.length || left[i] < right[j]) {\n            arr[k] = left[i];\n            i++;\n        } else {\n            arr[k] = right[j];\n            j++;\n        }\n        yield;\n    }\n}\n","import {swap} from '../utils.js';\n\n/**\n * @param {number[]} arr the array to sort\n * @returns {Generator} A generator that will progressively sort the underlying\n *  array\n */\nexport default function* selectionSort(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        let min = i;\n        for (let j = i; j < arr.length; j++) {\n            min = arr[j] < arr[min] ? j : min;\n        }\n        swap(arr, i, min);\n        yield;\n    }\n}\n","/**\n * @param {number[]} arr the array to sort\n * @returns {Generator} A generator that will progressively sort the underlying\n *  array\n */\nexport default function* insertionSort(arr) {\n    for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n            yield;\n        }\n        arr[j + 1] = key;\n    }\n}\n","import {debounce} from './utils.js';\nimport quickSort from './algorithms/quick-sort.js';\nimport heapSort from './algorithms/heap-sort.js';\nimport mergeSort from './algorithms/merge-sort.js';\nimport selectionSort from './algorithms/selection-sort.js';\nimport insertionSort from './algorithms/insertion-sort.js';\n\nnew p5(sketch => {\n\tconst select = document.querySelector('select[name=\"algorithm\"]');\n\tconst playBtn = document.querySelector('#play');\n\tconst pauseBtn = document.querySelector('#pause');\n\tconst resetBtn = document.querySelector('#reset');\n\tconst algorithms = {\n\t\t\"quick sort\": quickSort,\n\t\t\"heap sort\": heapSort,\n\t\t\"merge sort\": mergeSort,\n\t\t\"selection sort (slow)\": selectionSort,\n\t\t\"insertion sort (slow)\": insertionSort,\n\t};\n\tObject.keys(algorithms).forEach(algorithm => {\n\t\tconst option = document.createElement('option');\n\t\toption.value = option.textContent = algorithm;\n\t\tselect.appendChild(option);\n\t});\n\tconst array = [];\n\tconst barWidth = 1;\n\tconst gap = 0;\n\tlet playing = false;\n\tlet sorter;\n\tlet offsetLeft;\n\n\tfunction setPlayState(state) {\n\t\tplaying = state;\n\t\tplayBtn.classList.toggle('d-none', state);\n\t\tpauseBtn.classList.toggle('d-none', !state);\n\t}\n\tplayBtn.addEventListener('click', () => {\n\t\tsetPlayState(true);\n\t});\n\tpauseBtn.addEventListener('click', () => {\n\t\tsetPlayState(false);\n\t});\n\tresetBtn.addEventListener('click', () => {\n\t\tsetPlayState(false);\n\t\tsketch.setup();\n\t});\n\n\tselect.addEventListener('change', () => {\n\t\tsorter = algorithms[select.value](array);\n\t});\n\tconst resize = debounce(() => sketch.setup(), 200);\n\twindow.addEventListener('resize', () => {\n\t\tresize();\n\t});\n\n\tsketch.setup = function () {\n\t\tsketch.createCanvas(sketch.windowWidth, sketch.windowHeight);\n\t\tsketch.background(255);\n\t\tconst numPoints = sketch.floor((sketch.width + gap) / (barWidth + gap));\n\t\tarray.length = 0;\n\t\tfor (let i = 0; i < numPoints; i++) {\n\t\t\tarray[i] = sketch.random(0, 1);\n\t\t}\n\t\tconst graphWidth = numPoints * barWidth + (numPoints - 1) * gap;\n\t\toffsetLeft = sketch.floor((sketch.width - graphWidth) / 2);\n\t\tsorter = algorithms[select.value](array);\n\t};\n\n\tsketch.draw = function () {\n\t\tsketch.background(255);\n\t\tsketch.fill(0);\n\t\tsketch.noStroke();\n\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\tsketch.rect(offsetLeft + i * (barWidth + gap), sketch.height, barWidth, -array[i] * (sketch.height - 1));\n\t\t}\n\t\tif (playing) {\n\t\t\tfor (let i = 0; i < sketch.ceil(array.length / 20); i++) {\n\t\t\t\tif (sorter.next().done) {\n\t\t\t\t\tsetPlayState(false);\n\t\t\t\t\tsorter = algorithms[select.value](array);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n});\n"]}